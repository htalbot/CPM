// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.3.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be\be_codegen.cpp:652

#ifndef _TAO_IDL_ICPMS_EVJNXZ_CPP_
#define _TAO_IDL_ICPMS_EVJNXZ_CPP_


#include "ICPMS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be\be_interface.cpp:1868

class TAO_ICPM_module_ICPMProcess_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ICPM_module_ICPMProcess_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ICPM_module_ICPMProcess_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
     30, 30, 30, 30, 30,  0, 30,  0, 30, 10,
      0,  5, 30, 10, 30,  0, 30, 30, 30, 30,
     30,  0, 30, 30,  0,  0,  0, 30, 30, 30,
     30, 30, 30, 30, 30, 30, 30, 30,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ICPM_module_ICPMProcess_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 13,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 29,
      HASH_VALUE_RANGE = 25,
      DUPLICATES = 0,
      WORDLIST_SIZE = 18
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"as_gui", &POA_ICPM_module::ICPMProcess::as_gui_skel, 0},
      {"",0,0},
      {"show_gui", &POA_ICPM_module::ICPMProcess::show_gui_skel, 0},
      {"as_server", &POA_ICPM_module::ICPMProcess::as_server_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"object_list", &POA_ICPM_module::ICPMProcess::object_list_skel, 0},
      {"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"getpid", &POA_ICPM_module::ICPMProcess::getpid_skel, 0},
      {"show_console", &POA_ICPM_module::ICPMProcess::show_console_skel, 0},
      {"ctrl_end", &POA_ICPM_module::ICPMProcess::ctrl_end_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"",0,0},
      {"ctrl_ping", &POA_ICPM_module::ICPMProcess::ctrl_ping_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ICPM_module_ICPMProcess_Perfect_Hash_OpTable tao_ICPM_module_ICPMProcess_optable;

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:93

POA_ICPM_module::ICPMProcess::ICPMProcess (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ICPM_module_ICPMProcess_optable;
}

POA_ICPM_module::ICPMProcess::ICPMProcess (const ICPMProcess& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ICPM_module::ICPMProcess::~ICPMProcess (void)
{
}

namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class object_list_ICPMProcess
    : public TAO::Upcall_Command
  {
  public:
    inline object_list_ICPMProcess (
      POA_ICPM_module::ICPMProcess * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ICPM_module::ObjectDescSeq>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::ICPM_module::ObjectDescSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->object_list (
        arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMProcess * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMProcess::object_list_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::ObjectDescSeq>::out_arg_val _tao_list;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_list
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMProcess * const impl =
    dynamic_cast<POA_ICPM_module::ICPMProcess *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  object_list_ICPMProcess command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class ctrl_end_ICPMProcess
    : public TAO::Upcall_Command
  {
  public:
    inline ctrl_end_ICPMProcess (
      POA_ICPM_module::ICPMProcess * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->ctrl_end ();
    }
  
  private:
    POA_ICPM_module::ICPMProcess * const servant_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMProcess::ctrl_end_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ICPM_module::ICPMProcess * const impl =
    dynamic_cast<POA_ICPM_module::ICPMProcess *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  ctrl_end_ICPMProcess command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class ctrl_ping_ICPMProcess
    : public TAO::Upcall_Command
  {
  public:
    inline ctrl_ping_ICPMProcess (
      POA_ICPM_module::ICPMProcess * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->ctrl_ping ();
    }
  
  private:
    POA_ICPM_module::ICPMProcess * const servant_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMProcess::ctrl_ping_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ICPM_module::ICPMProcess * const impl =
    dynamic_cast<POA_ICPM_module::ICPMProcess *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  ctrl_ping_ICPMProcess command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class show_console_ICPMProcess
    : public TAO::Upcall_Command
  {
  public:
    inline show_console_ICPMProcess (
      POA_ICPM_module::ICPMProcess * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->show_console (
        arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMProcess * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMProcess::show_console_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_show;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_show
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMProcess * const impl =
    dynamic_cast<POA_ICPM_module::ICPMProcess *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  show_console_ICPMProcess command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class show_gui_ICPMProcess
    : public TAO::Upcall_Command
  {
  public:
    inline show_gui_ICPMProcess (
      POA_ICPM_module::ICPMProcess * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->show_gui (
        arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMProcess * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMProcess::show_gui_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_show;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_show
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMProcess * const impl =
    dynamic_cast<POA_ICPM_module::ICPMProcess *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  show_gui_ICPMProcess command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class as_server_ICPMProcess
    : public TAO::Upcall_Command
  {
  public:
    inline as_server_ICPMProcess (
      POA_ICPM_module::ICPMProcess * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->as_server (
        arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMProcess * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMProcess::as_server_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_flag;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_flag
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMProcess * const impl =
    dynamic_cast<POA_ICPM_module::ICPMProcess *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  as_server_ICPMProcess command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class as_gui_ICPMProcess
    : public TAO::Upcall_Command
  {
  public:
    inline as_gui_ICPMProcess (
      POA_ICPM_module::ICPMProcess * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->as_gui (
        arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMProcess * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMProcess::as_gui_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_flag;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_flag
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMProcess * const impl =
    dynamic_cast<POA_ICPM_module::ICPMProcess *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  as_gui_ICPMProcess command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class getpid_ICPMProcess
    : public TAO::Upcall_Command
  {
  public:
    inline getpid_ICPMProcess (
      POA_ICPM_module::ICPMProcess * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->getpid ();
    }
  
  private:
    POA_ICPM_module::ICPMProcess * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMProcess::getpid_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ICPM_module::ICPMProcess * const impl =
    dynamic_cast<POA_ICPM_module::ICPMProcess *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  getpid_ICPMProcess command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:166



::CORBA::Boolean POA_ICPM_module::ICPMProcess::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ICPM_module/ICPMProcess:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ICPM_module::ICPMProcess::_interface_repository_id (void) const
{
  return "IDL:ICPM_module/ICPMProcess:1.0";
}

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:426

void POA_ICPM_module::ICPMProcess::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:373

ICPM_module::ICPMProcess *
POA_ICPM_module::ICPMProcess::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ICPM_module::ICPMProcess STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be\be_interface.cpp:1868

class TAO_ICPM_module_ICPMD_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ICPM_module_ICPMD_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ICPM_module_ICPMD_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
     33, 33, 33, 33, 33,  0, 33, 15, 33, 33,
      0,  5, 33,  0, 33,  0, 33, 33, 33, 33,
     33,  0,  0, 33, 33,  0,  0, 33, 33, 33,
     33, 33, 33, 33, 33, 33, 33, 33,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ICPM_module_ICPMD_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 11,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 32,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 32,
      HASH_VALUE_RANGE = 29,
      DUPLICATES = 0,
      WORDLIST_SIZE = 15
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"stop", &POA_ICPM_module::ICPMD::stop_skel, 0},
      {"start", &POA_ICPM_module::ICPMD::start_skel, 0},
      {"",0,0},{"",0,0},
      {"show_gui", &POA_ICPM_module::ICPMD::show_gui_skel, 0},
      {"",0,0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"",0,0},
      {"show_console", &POA_ICPM_module::ICPMD::show_console_skel, 0},
      {"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},
      {"get_launched_processes", &POA_ICPM_module::ICPMD::get_launched_processes_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"on_new_getting_reference_timeout", &POA_ICPM_module::ICPMD::on_new_getting_reference_timeout_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ICPM_module_ICPMD_Perfect_Hash_OpTable tao_ICPM_module_ICPMD_optable;

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:93

POA_ICPM_module::ICPMD::ICPMD (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ICPM_module_ICPMD_optable;
}

POA_ICPM_module::ICPMD::ICPMD (const ICPMD& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ICPM_module::ICPMD::~ICPMD (void)
{
}

namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class start_ICPMD
    : public TAO::Upcall_Command
  {
  public:
    inline start_ICPMD (
      POA_ICPM_module::ICPMD * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ICPM_module::ProcessSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->start (
          arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMD * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMD::start_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_val _tao_procs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_procs
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMD * const impl =
    dynamic_cast<POA_ICPM_module::ICPMD *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  start_ICPMD command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class stop_ICPMD
    : public TAO::Upcall_Command
  {
  public:
    inline stop_ICPMD (
      POA_ICPM_module::ICPMD * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ICPM_module::ProcessSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->stop (
          arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMD * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMD::stop_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_val _tao_procs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_procs
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMD * const impl =
    dynamic_cast<POA_ICPM_module::ICPMD *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  stop_ICPMD command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class show_console_ICPMD
    : public TAO::Upcall_Command
  {
  public:
    inline show_console_ICPMD (
      POA_ICPM_module::ICPMD * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ICPM_module::ProcessSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->show_console (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ICPM_module::ICPMD * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMD::show_console_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_val _tao_procs;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_show;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_procs,
      &_tao_show
    };
  
  static size_t const nargs = 3;

  POA_ICPM_module::ICPMD * const impl =
    dynamic_cast<POA_ICPM_module::ICPMD *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  show_console_ICPMD command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class show_gui_ICPMD
    : public TAO::Upcall_Command
  {
  public:
    inline show_gui_ICPMD (
      POA_ICPM_module::ICPMD * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ICPM_module::ProcessSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->show_gui (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ICPM_module::ICPMD * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMD::show_gui_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_val _tao_procs;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_show;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_procs,
      &_tao_show
    };
  
  static size_t const nargs = 3;

  POA_ICPM_module::ICPMD * const impl =
    dynamic_cast<POA_ICPM_module::ICPMD *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  show_gui_ICPMD command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class get_launched_processes_ICPMD
    : public TAO::Upcall_Command
  {
  public:
    inline get_launched_processes_ICPMD (
      POA_ICPM_module::ICPMD * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::ICPM_module::ProcessSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->get_launched_processes (
        arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMD * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMD::get_launched_processes_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::out_arg_val _tao_processes;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_processes
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMD * const impl =
    dynamic_cast<POA_ICPM_module::ICPMD *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_launched_processes_ICPMD command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class on_new_getting_reference_timeout_ICPMD
    : public TAO::Upcall_Command
  {
  public:
    inline on_new_getting_reference_timeout_ICPMD (
      POA_ICPM_module::ICPMD * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->on_new_getting_reference_timeout (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ICPM_module::ICPMD * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMD::on_new_getting_reference_timeout_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_loop_timeout_ms;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_attempts;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_loop_timeout_ms,
      &_tao_attempts
    };
  
  static size_t const nargs = 3;

  POA_ICPM_module::ICPMD * const impl =
    dynamic_cast<POA_ICPM_module::ICPMD *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  on_new_getting_reference_timeout_ICPMD command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:166



::CORBA::Boolean POA_ICPM_module::ICPMD::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ICPM_module/ICPMD:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ICPM_module::ICPMD::_interface_repository_id (void) const
{
  return "IDL:ICPM_module/ICPMD:1.0";
}

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:426

void POA_ICPM_module::ICPMD::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:373

ICPM_module::ICPMD *
POA_ICPM_module::ICPMD::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ICPM_module::ICPMD STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be\be_interface.cpp:1868

class TAO_ICPM_module_ICPMObject_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ICPM_module_ICPMObject_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ICPM_module_ICPMObject_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16,  0, 16,  0, 16,  0,
      0,  5, 16,  0, 16, 16, 16, 16, 16, 16,
      0, 16, 16, 16, 16, 16,  0, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ICPM_module_ICPMObject_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 7,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 15,
      HASH_VALUE_RANGE = 11,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"ctrl_ping", &POA_ICPM_module::ICPMObject::ctrl_ping_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"get_version", &POA_ICPM_module::ICPMObject::get_version_skel, 0},
      {"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ICPM_module_ICPMObject_Perfect_Hash_OpTable tao_ICPM_module_ICPMObject_optable;

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:93

POA_ICPM_module::ICPMObject::ICPMObject (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ICPM_module_ICPMObject_optable;
}

POA_ICPM_module::ICPMObject::ICPMObject (const ICPMObject& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ICPM_module::ICPMObject::~ICPMObject (void)
{
}

namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class get_version_ICPMObject
    : public TAO::Upcall_Command
  {
  public:
    inline get_version_ICPMObject (
      POA_ICPM_module::ICPMObject * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CORBA::Long>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CORBA::Long> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->get_version (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_ICPM_module::ICPMObject * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMObject::get_version_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_major;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_minor;
  TAO::SArg_Traits< ::CORBA::Long>::out_arg_val _tao_patch;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_major,
      &_tao_minor,
      &_tao_patch
    };
  
  static size_t const nargs = 4;

  POA_ICPM_module::ICPMObject * const impl =
    dynamic_cast<POA_ICPM_module::ICPMObject *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_version_ICPMObject command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class ctrl_ping_ICPMObject
    : public TAO::Upcall_Command
  {
  public:
    inline ctrl_ping_ICPMObject (
      POA_ICPM_module::ICPMObject * servant)
      : servant_ (servant)
    {
    }

    virtual void execute (void)
    {
      this->servant_->ctrl_ping ();
    }
  
  private:
    POA_ICPM_module::ICPMObject * const servant_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMObject::ctrl_ping_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ICPM_module::ICPMObject * const impl =
    dynamic_cast<POA_ICPM_module::ICPMObject *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  ctrl_ping_ICPMObject command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:166



::CORBA::Boolean POA_ICPM_module::ICPMObject::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ICPM_module/ICPMObject:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ICPM_module::ICPMObject::_interface_repository_id (void) const
{
  return "IDL:ICPM_module/ICPMObject:1.0";
}

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:426

void POA_ICPM_module::ICPMObject::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:373

ICPM_module::ICPMObject *
POA_ICPM_module::ICPMObject::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ICPM_module::ICPMObject STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be\be_interface.cpp:1868

class TAO_ICPM_module_ICPMM_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ICPM_module_ICPMM_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ICPM_module_ICPMM_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
     31, 31, 31, 31, 31,  0, 31,  4, 31, 31,
      5, 10, 31,  5, 31,  0, 31, 31, 31, 31,
     31,  0,  0, 31, 31,  0,  0,  0, 31, 31,
     31, 31, 31, 31, 31, 31, 31, 31,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ICPM_module_ICPMM_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 15,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 16,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 30,
      HASH_VALUE_RANGE = 27,
      DUPLICATES = 0,
      WORDLIST_SIZE = 19
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"stop", &POA_ICPM_module::ICPMM::stop_skel, 0},
      {"start", &POA_ICPM_module::ICPMM::start_skel, 0},
      {"",0,0},{"",0,0},
      {"show_gui", &POA_ICPM_module::ICPMM::show_gui_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"",0,0},
      {"started", &POA_ICPM_module::ICPMM::started_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"set_as_default", &POA_ICPM_module::ICPMM::set_as_default_skel, 0},
      {"update_settings", &POA_ICPM_module::ICPMM::update_settings_skel, 0},
      {"save_settings_to", &POA_ICPM_module::ICPMM::save_settings_to_skel, 0},
      {"get_settings", &POA_ICPM_module::ICPMM::get_settings_skel, 0},
      {"",0,0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"",0,0},
      {"show_console", &POA_ICPM_module::ICPMM::show_console_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"get_unavailable", &POA_ICPM_module::ICPMM::get_unavailable_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ICPM_module_ICPMM_Perfect_Hash_OpTable tao_ICPM_module_ICPMM_optable;

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:93

POA_ICPM_module::ICPMM::ICPMM (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ICPM_module_ICPMM_optable;
}

POA_ICPM_module::ICPMM::ICPMM (const ICPMM& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_ICPM_module::ICPMM::~ICPMM (void)
{
}

namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class get_settings_ICPMM
    : public TAO::Upcall_Command
  {
  public:
    inline get_settings_ICPMM (
      POA_ICPM_module::ICPMM * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ICPM_module::CPMMSettings>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::ICPM_module::CPMMSettings> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ICPM_module::CPMMSettings>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::ICPM_module::CPMMSettings> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->get_settings (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_ICPM_module::ICPMM * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMM::get_settings_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::CPMMSettings>::out_arg_val _tao_initial;
  TAO::SArg_Traits< ::ICPM_module::CPMMSettings>::out_arg_val _tao_current;
  TAO::SArg_Traits< char *>::out_arg_val _tao_current_settings_file;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_initial,
      &_tao_current,
      &_tao_current_settings_file
    };
  
  static size_t const nargs = 4;

  POA_ICPM_module::ICPMM * const impl =
    dynamic_cast<POA_ICPM_module::ICPMM *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_settings_ICPMM command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class start_ICPMM
    : public TAO::Upcall_Command
  {
  public:
    inline start_ICPMM (
      POA_ICPM_module::ICPMM * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ICPM_module::ProcessSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->start (
          arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMM * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMM::start_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_val _tao_procs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_procs
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMM * const impl =
    dynamic_cast<POA_ICPM_module::ICPMM *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  start_ICPMM command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class stop_ICPMM
    : public TAO::Upcall_Command
  {
  public:
    inline stop_ICPMM (
      POA_ICPM_module::ICPMM * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ICPM_module::ProcessSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->stop (
          arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMM * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMM::stop_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_val _tao_procs;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_procs
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMM * const impl =
    dynamic_cast<POA_ICPM_module::ICPMM *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  stop_ICPMM command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class show_console_ICPMM
    : public TAO::Upcall_Command
  {
  public:
    inline show_console_ICPMM (
      POA_ICPM_module::ICPMM * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ICPM_module::ProcessSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->show_console (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ICPM_module::ICPMM * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMM::show_console_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_val _tao_procs;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_show;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_procs,
      &_tao_show
    };
  
  static size_t const nargs = 3;

  POA_ICPM_module::ICPMM * const impl =
    dynamic_cast<POA_ICPM_module::ICPMM *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  show_console_ICPMM command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class show_gui_ICPMM
    : public TAO::Upcall_Command
  {
  public:
    inline show_gui_ICPMM (
      POA_ICPM_module::ICPMM * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ICPM_module::ProcessSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->show_gui (
        arg_1
        , arg_2);
    }
  
  private:
    POA_ICPM_module::ICPMM * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMM::show_gui_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::ProcessSeq>::in_arg_val _tao_procs;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_show;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_procs,
      &_tao_show
    };
  
  static size_t const nargs = 3;

  POA_ICPM_module::ICPMM * const impl =
    dynamic_cast<POA_ICPM_module::ICPMM *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  show_gui_ICPMM command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class started_ICPMM
    : public TAO::Upcall_Command
  {
  public:
    inline started_ICPMM (
      POA_ICPM_module::ICPMM * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->started ();
    }
  
  private:
    POA_ICPM_module::ICPMM * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMM::started_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ICPM_module::ICPMM * const impl =
    dynamic_cast<POA_ICPM_module::ICPMM *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  started_ICPMM command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class get_unavailable_ICPMM
    : public TAO::Upcall_Command
  {
  public:
    inline get_unavailable_ICPMM (
      POA_ICPM_module::ICPMM * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::ICPM_module::UnavailableElementIDSeq>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::ICPM_module::UnavailableElementIDSeq> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ICPM_module::UnavailableElementIDSeq>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::ICPM_module::UnavailableElementIDSeq> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->get_unavailable (
          arg_1
          , arg_2);
    }
  
  private:
    POA_ICPM_module::ICPMM * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMM::get_unavailable_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::UnavailableElementIDSeq>::out_arg_val _tao_nodes;
  TAO::SArg_Traits< ::ICPM_module::UnavailableElementIDSeq>::out_arg_val _tao_processes;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_nodes,
      &_tao_processes
    };
  
  static size_t const nargs = 3;

  POA_ICPM_module::ICPMM * const impl =
    dynamic_cast<POA_ICPM_module::ICPMM *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_unavailable_ICPMM command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class update_settings_ICPMM
    : public TAO::Upcall_Command
  {
  public:
    inline update_settings_ICPMM (
      POA_ICPM_module::ICPMM * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ICPM_module::CPMMSettings>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::ICPM_module::CPMMSettings> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::ICPM_module::CPMMSettings>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::ICPM_module::CPMMSettings> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_3 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->update_settings (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_ICPM_module::ICPMM * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMM::update_settings_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::ICPM_module::CPMMSettings>::in_arg_val _tao_new_initial_settings;
  TAO::SArg_Traits< ::ICPM_module::CPMMSettings>::in_arg_val _tao_new_current_settings;
  TAO::SArg_Traits< char *>::in_arg_val _tao_file;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_new_initial_settings,
      &_tao_new_current_settings,
      &_tao_file
    };
  
  static size_t const nargs = 4;

  POA_ICPM_module::ICPMM * const impl =
    dynamic_cast<POA_ICPM_module::ICPMM *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  update_settings_ICPMM command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class save_settings_to_ICPMM
    : public TAO::Upcall_Command
  {
  public:
    inline save_settings_to_ICPMM (
      POA_ICPM_module::ICPMM * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->save_settings_to (
          arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMM * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMM::save_settings_to_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_target_file;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_target_file
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMM * const impl =
    dynamic_cast<POA_ICPM_module::ICPMM *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  save_settings_to_ICPMM command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class set_as_default_ICPMM
    : public TAO::Upcall_Command
  {
  public:
    inline set_as_default_ICPMM (
      POA_ICPM_module::ICPMM * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->set_as_default ();
    }
  
  private:
    POA_ICPM_module::ICPMM * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMM::set_as_default_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_ICPM_module::ICPMM * const impl =
    dynamic_cast<POA_ICPM_module::ICPMM *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  set_as_default_ICPMM command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:166



::CORBA::Boolean POA_ICPM_module::ICPMM::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ICPM_module/ICPMM:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ICPM_module::ICPMM::_interface_repository_id (void) const
{
  return "IDL:ICPM_module/ICPMM:1.0";
}

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:426

void POA_ICPM_module::ICPMM::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:373

ICPM_module::ICPMM *
POA_ICPM_module::ICPMM::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ICPM_module::ICPMM STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

// TAO_IDL - Generated from
// be\be_interface.cpp:1868

class TAO_ICPM_module_ICPMEventMgr_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_ICPM_module_ICPMEventMgr_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_ICPM_module_ICPMEventMgr_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
     16, 16, 16, 16, 16,  0, 16,  0, 16,  0,
      0,  5, 16,  0,  0, 16, 16, 16, 16, 16,
      0, 16,  0, 16, 16, 16,  0, 16, 16, 16,
     16, 16, 16, 16, 16, 16, 16, 16,
    };
  return len + asso_values[static_cast<int>(str[len - 1])] + asso_values[static_cast<int>(str[0])];
}

const TAO_operation_db_entry *
TAO_ICPM_module_ICPMEventMgr_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 8,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 14,
      MIN_HASH_VALUE = 4,
      MAX_HASH_VALUE = 15,
      HASH_VALUE_RANGE = 12,
      DUPLICATES = 0,
      WORDLIST_SIZE = 12
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"push", &POA_ICPM_module::ICPMEventMgr::push_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"ctrl_ping", &POA_ICPM_module::ICPMObject::ctrl_ping_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"get_version", &POA_ICPM_module::ICPMObject::get_version_skel, 0},
      {"",0,0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_ICPM_module_ICPMEventMgr_Perfect_Hash_OpTable tao_ICPM_module_ICPMEventMgr_optable;

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:93

POA_ICPM_module::ICPMEventMgr::ICPMEventMgr (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_ICPM_module_ICPMEventMgr_optable;
}

POA_ICPM_module::ICPMEventMgr::ICPMEventMgr (const ICPMEventMgr& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_ICPM_module::ICPMObject (rhs)
{
}

POA_ICPM_module::ICPMEventMgr::~ICPMEventMgr (void)
{
}

namespace POA_ICPM_module
{
  

  // TAO_IDL - Generated from
  // be\be_visitor_operation\upcall_command_ss.cpp:83

  class push_ICPMEventMgr
    : public TAO::Upcall_Command
  {
  public:
    inline push_ICPMEventMgr (
      POA_ICPM_module::ICPMEventMgr * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::IBASICEVENTCORBA_module::BasicEventCorba>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::IBASICEVENTCORBA_module::BasicEventCorba> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->push (
        arg_1);
    }
  
  private:
    POA_ICPM_module::ICPMEventMgr * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// be\be_visitor_operation\operation_ss.cpp:171

void POA_ICPM_module::ICPMEventMgr::push_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::IBASICEVENTCORBA_module::BasicEventCorba>::in_arg_val _tao_event;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_event
    };
  
  static size_t const nargs = 2;

  POA_ICPM_module::ICPMEventMgr * const impl =
    dynamic_cast<POA_ICPM_module::ICPMEventMgr *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  push_ICPMEventMgr command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:166



::CORBA::Boolean POA_ICPM_module::ICPMEventMgr::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:ICPM_module/ICPMObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:ICPM_module/ICPMEventMgr:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_ICPM_module::ICPMEventMgr::_interface_repository_id (void) const
{
  return "IDL:ICPM_module/ICPMEventMgr:1.0";
}

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:426

void POA_ICPM_module::ICPMEventMgr::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be\be_visitor_interface\interface_ss.cpp:373

ICPM_module::ICPMEventMgr *
POA_ICPM_module::ICPMEventMgr::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::ICPM_module::ICPMEventMgr STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

