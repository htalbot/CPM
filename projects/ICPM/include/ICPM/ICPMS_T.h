// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.3.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be\be_codegen.cpp:599

#ifndef _TAO_IDL_ICPMS_T_GESREO_H_
#define _TAO_IDL_ICPMS_T_GESREO_H_

#include /**/ "ace/pre.h"

// TAO_IDL - Generated from
// be\be_visitor_root\root_sth.cpp:68

namespace POA_ICPM_module
{

  // TAO_IDL - Generated from
  // be\be_visitor_interface\tie_sh.cpp:74

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  ICPMProcess_tie : public ICPMProcess
  {
  public:
    /// the T& ctor
    ICPMProcess_tie (T &t);
    /// ctor taking a POA
    ICPMProcess_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    ICPMProcess_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    ICPMProcess_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~ICPMProcess_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void object_list (
      ::ICPM_module::ObjectDescSeq_out);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void ctrl_end (
      void);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void ctrl_ping (
      void);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void show_console (
      ::CORBA::Boolean);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void show_gui (
      ::CORBA::Boolean);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void as_server (
      ::CORBA::Boolean);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void as_gui (
      ::CORBA::Boolean);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    ::CORBA::Long getpid (
      void);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ICPMProcess_tie (const ICPMProcess_tie &);
    void operator= (const ICPMProcess_tie &);
  };

  // TAO_IDL - Generated from
  // be\be_visitor_interface\tie_sh.cpp:74

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  ICPMD_tie : public ICPMD
  {
  public:
    /// the T& ctor
    ICPMD_tie (T &t);
    /// ctor taking a POA
    ICPMD_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    ICPMD_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    ICPMD_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~ICPMD_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    ::CORBA::Boolean start (
      const ::ICPM_module::ProcessSeq &);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    ::CORBA::Boolean stop (
      const ::ICPM_module::ProcessSeq &);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void show_console (
      const ::ICPM_module::ProcessSeq &,
      ::CORBA::Boolean);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void show_gui (
      const ::ICPM_module::ProcessSeq &,
      ::CORBA::Boolean);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void get_launched_processes (
      ::ICPM_module::ProcessSeq_out);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void on_new_getting_reference_timeout (
      ::CORBA::Long,
      ::CORBA::Long);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ICPMD_tie (const ICPMD_tie &);
    void operator= (const ICPMD_tie &);
  };

  // TAO_IDL - Generated from
  // be\be_visitor_interface\tie_sh.cpp:74

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  ICPMObject_tie : public ICPMObject
  {
  public:
    /// the T& ctor
    ICPMObject_tie (T &t);
    /// ctor taking a POA
    ICPMObject_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    ICPMObject_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    ICPMObject_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~ICPMObject_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void get_version (
      ::CORBA::Long_out,
      ::CORBA::Long_out,
      ::CORBA::Long_out);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void ctrl_ping (
      void);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ICPMObject_tie (const ICPMObject_tie &);
    void operator= (const ICPMObject_tie &);
  };

  // TAO_IDL - Generated from
  // be\be_visitor_interface\tie_sh.cpp:74

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  ICPMM_tie : public ICPMM
  {
  public:
    /// the T& ctor
    ICPMM_tie (T &t);
    /// ctor taking a POA
    ICPMM_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    ICPMM_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    ICPMM_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~ICPMM_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void get_settings (
      ::ICPM_module::CPMMSettings_out,
      ::ICPM_module::CPMMSettings_out,
      ::CORBA::String_out);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    ::CORBA::Boolean start (
      const ::ICPM_module::ProcessSeq &);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    ::CORBA::Boolean stop (
      const ::ICPM_module::ProcessSeq &);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void show_console (
      const ::ICPM_module::ProcessSeq &,
      ::CORBA::Boolean);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void show_gui (
      const ::ICPM_module::ProcessSeq &,
      ::CORBA::Boolean);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    ::CORBA::Boolean started (
      void);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    ::CORBA::Boolean get_unavailable (
      ::ICPM_module::UnavailableElementIDSeq_out,
      ::ICPM_module::UnavailableElementIDSeq_out);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void update_settings (
      const ::ICPM_module::CPMMSettings &,
      const ::ICPM_module::CPMMSettings &,
      const char *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    ::CORBA::Boolean save_settings_to (
      const char *);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    ::CORBA::Boolean set_as_default (
      void);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ICPMM_tie (const ICPMM_tie &);
    void operator= (const ICPMM_tie &);
  };

  // TAO_IDL - Generated from
  // be\be_visitor_interface\tie_sh.cpp:74

  // TIE class: Refer to CORBA v2.2, Section 20.34.4
  template <class T>
  class  ICPMEventMgr_tie : public ICPMEventMgr
  {
  public:
    /// the T& ctor
    ICPMEventMgr_tie (T &t);
    /// ctor taking a POA
    ICPMEventMgr_tie (T &t, PortableServer::POA_ptr poa);
    /// ctor taking pointer and an ownership flag
    ICPMEventMgr_tie (T *tp, ::CORBA::Boolean release = true);
    /// ctor with T*, ownership flag and a POA
    ICPMEventMgr_tie (
        T *tp,
        PortableServer::POA_ptr poa,
        ::CORBA::Boolean release = true
      );
    /// dtor

    ~ICPMEventMgr_tie (void);
    // TIE specific functions
    /// return the underlying object
    T *_tied_object (void);
    /// set the underlying object
    void _tied_object (T &obj);
    /// set the underlying object and the ownership flag
    void _tied_object (T *obj, ::CORBA::Boolean release = true);
    /// do we own it
    ::CORBA::Boolean _is_owner (void);
    /// set the ownership

    void _is_owner ( ::CORBA::Boolean b);
    // overridden ServantBase operations
    PortableServer::POA_ptr _default_POA (void);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void get_version (
      ::CORBA::Long_out,
      ::CORBA::Long_out,
      ::CORBA::Long_out);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void ctrl_ping (
      void);

    // TAO_IDL - Generated from
    // be\be_visitor_operation\tie_sh.cpp:54

    void push (
      const ::IBASICEVENTCORBA_module::BasicEventCorba &);
  
  private:
    T *ptr_;
    PortableServer::POA_var poa_;
    ::CORBA::Boolean rel_;

    // copy and assignment are not allowed
    ICPMEventMgr_tie (const ICPMEventMgr_tie &);
    void operator= (const ICPMEventMgr_tie &);
  };
} // module ICPM_module

// TAO_IDL - Generated from
// be\be_codegen.cpp:1847


#if defined (ACE_TEMPLATES_REQUIRE_SOURCE)
#include "ICPMS_T.cpp"
#endif /* defined REQUIRED SOURCE */

#if defined (ACE_TEMPLATES_REQUIRE_PRAGMA)
#pragma implementation ("ICPMS_T.cpp")
#endif /* defined REQUIRED PRAGMA */

#include /**/ "ace/post.h"
#endif /* ifndef */

