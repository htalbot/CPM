// -*- C++ -*- generated by wxGlade 0.6.5 on Fri Oct 12 15:26:48 2012 from "C:\dpo\core\trunk\tools\templates\layer\wxWidgets\src\CPMG.wxg"

#ifndef CPMGFRAME_H
#define CPMGFRAME_H

#include "ACEWin64Warnings/BeginSuppressWarnings.h"
#include "ICPM/ICPMC.h"
#include "ACEWin64Warnings/EndSuppressWarnings.h"
#include "DPOConsole/DPOConsole.h"

#include <map>
#include <list>

#undef mode_t
#include <wx/wx.h>
#include <wx/image.h>

// begin wxGlade: ::dependencies
#include <wx/splitter.h>
#include <wx/treectrl.h>
#include <wx/notebook.h>
#include <wx/grid.h>
// end wxGlade

// begin wxGlade: ::extracode
// end wxGlade

enum enum_popup
{
    POPUP_NEW_NODE,
    POPUP_NEW_PROCESS,
    POPUP_START,
    POPUP_STOP,
    POPUP_SHOW_CONSOLE,
    POPUP_HIDE_CONSOLE,
    POPUP_ENABLE,
    POPUP_DISABLE,
    POPUP_REMOVE,
    POPUP_PIDS,
    POPUP_GET_VERSION
};

enum enum_item_type
{
    ROOT,
    NODE,
    PROCESS,
    OBJECT
};


class CPMGFrame: 
    public wxFrame
{
public:
    // begin wxGlade: CPMGFrame::ids
    // end wxGlade

    enum
    {
        END
    } MsgType;

    CPMGFrame(wxWindow* parent,
                int id,
                const wxString& title,
                const wxPoint& pos=wxDefaultPosition,
                const wxSize& size=wxDefaultSize,
                long style=wxDEFAULT_FRAME_STYLE);

    bool init();
    bool get_ref_on_cpmm();
    enum_item_type get_selection_type();

private:
    // begin wxGlade: CPMGFrame::methods
    void set_properties();
    void do_layout();
    // end wxGlade

protected:
    // begin wxGlade: CPMGFrame::attributes
    wxStaticBox* sizer_5_staticbox;
    wxStaticBox* sizer_10_staticbox;
    wxStaticBox* sizer_9_staticbox;
    wxButton* button_boot_cpm;
    wxCheckBox* checkbox_overwrite_auto_start_to_false;
    wxButton* button_shutdown_cpmm;
    wxButton* button_shutdown_cpmd;
    wxCheckBox* checkbox_console_cpmm;
    wxCheckBox* checkbox_console_cpmd;
    wxCheckBox* checkbox_cpmg;
    wxTreeCtrl* tree_ctrl_nodes;
    wxButton* button_set_as_default;
    wxButton* button_save;
    wxButton* button_save_as;
    wxButton* button_load;
    wxButton* button_show_objects;
    wxPanel* window_1_pane_nodes;
    wxGrid* grid_processes;
    wxPanel* window_2_pane_processes;
    wxListBox* list_box_msg;
    wxButton* button_clear_msg;
    wxPanel* window_2_pane_msg;
    wxSplitterWindow* window_2;
    wxPanel* notebook_1_pane_1;
    wxNotebook* notebook_processes;
    wxPanel* window_1_pane_plugins;
    wxSplitterWindow* window_1;
    // end wxGlade

    DECLARE_EVENT_TABLE();

protected:
    void set_title(
                const std::string &);
    bool load_settings(
                ::ICPM_module::CPMMSettings & init,
                ::ICPM_module::CPMMSettings & current,
                std::string & file);
    void fill_tree(
                const ::ICPM_module::CPMMSettings &,
                bool reset_show_objects = false);
    bool fill_processes_with_objects_ids(
                ::ICPM_module::ProcessDef & proc,
                wxTreeItemId & item);
    void fill_processes_list(
                const std::string &);
    ::ICPM_module::ProcessSeq get_selected_procs();
    std::map<std::string, std::list<std::string> > get_selected_objects();
    void enable(
                bool flag);
    void set_widgets_status();
    bool node_unavailable(
                const std::string & node_id,
                ::ICPM_module::UnavailableElementIDSeq & nodes);
    bool process_unavailable(
                const std::string & node_id,
                const std::string & proc_id,
                ::ICPM_module::UnavailableElementIDSeq & processes);
    void start(
                wxCommandEvent &event);
    void stop(
                const ::ICPM_module::ProcessSeq & proc_seq);
    
    void show_console(
                const ICPM_module::ProcessSeq & proc_seq, 
                bool show);

    bool cpmm_update_settings(
                const ::ICPM_module::CPMMSettings & init,
                const ::ICPM_module::CPMMSettings & current,
                const std::string & file);
    bool settings_changed(
                const ::ICPM_module::CPMMSettings & initial_settings,
                const ::ICPM_module::CPMMSettings & current_settings);
    bool local_settings_changed();
    bool CPMGFrame::remote_settings_changed(
                ::ICPM_module::CPMMSettings & new_current_settings,
                std::string & new_current_settings_file);
    bool get_cpmm_started_status(
                bool & started);
    void report(
                const char * format, ...);
    void vreport(
                const char * format,
                va_list args);
    bool ask_for_stopping(
                enum_item_type);
    void cpmm_update_settings_id(
                const std::string & settings_id);
    bool cpmm_update_node_id(
                const std::string & old_node_id,
                const std::string & new_node_id,
                wxTreeEvent &);
    bool cpmm_add_node(
                const std::string & node_id);
    void hide_objects();
    void post_refresh();
    void show_objects();
    void quit(wxCloseEvent& event);
    bool get_unavailable(
        ::ICPM_module::UnavailableElementIDSeq & nodes,
        ::ICPM_module::UnavailableElementIDSeq & processes);
    bool test_cpmd_connection();
    bool save_options(bool ask_user);

protected:
    ::ICPM_module::CPMMSettings initial_settings_;
    ::ICPM_module::CPMMSettings current_settings_;
    std::string current_settings_file_;

    ::ICPM_module::ICPMM_var cpmm_obj_;
    bool started_manually_;
    bool refresh_objects_;
    bool show_objects_;

    wxTimer * m_pTimer;

    bool show_cpmm_console_init_;
    bool show_cpmd_console_init_;
    bool overwrite_autostart_to_false_;
    bool cpmd_connection_test_done_once_;

    ACE_Time_Value last_get_unavailable_;

    DPOConsole_ns::DPOConsole console_;

public:
    virtual void on_button_load(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_save(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_save_as(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_set_as_default(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_sel_changed(wxTreeEvent &event); // wxGlade: <event_handler>
    virtual void on_tree_item_right_click(wxTreeEvent &event); // wxGlade: <event_handler>
    virtual void on_tree_key_down(wxTreeEvent &event); // wxGlade: <event_handler>
    virtual void on_tree_end_label_edit(wxTreeEvent &event); // wxGlade: <event_handler>
    virtual void on_cell_changed_grid_procs(wxGridEvent &event); // wxGlade: <event_handler>
    virtual void on_button_show_objects(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_list_msg_click(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_boot_cpm(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_shutdown_cpmm(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_shutdown_cpmd(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_button_clear_msg(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_checkbox_cpmg(wxCommandEvent &event); // wxGlade: <event_handler>
    virtual void on_start(wxCommandEvent &event);
    virtual void on_stop(wxCommandEvent &event);
    virtual void on_show_console(wxCommandEvent &event);
    virtual void on_hide_console(wxCommandEvent &event);
    virtual void on_new_node(wxCommandEvent &event);
    virtual void on_new_process(wxCommandEvent &event);
    virtual void on_enable(wxCommandEvent &event);
    virtual void on_disable(wxCommandEvent &event);
    virtual void on_remove(wxCommandEvent &event);
    virtual void on_pids(wxCommandEvent &event);
    virtual void on_get_version(wxCommandEvent &event);
    virtual void on_refresh(wxCommandEvent &event);
    virtual void on_close(wxCloseEvent& event);
    virtual void OnTimerTimeout(wxTimerEvent& event);
}; // wxGlade: end class


#endif // CPMGFRAME_H
